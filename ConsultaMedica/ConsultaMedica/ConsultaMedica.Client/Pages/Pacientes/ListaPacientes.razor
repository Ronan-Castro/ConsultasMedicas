@page "/pacientes"
@inject IPacienteRepository repository

<FluentGenericHeader Href="pacientes/criar" Title="Pacientes"/>
<MudDataGrid Items="@Pacientes" Filterable="false" SortMode="@SortMode.Single" Groupable="false">
    <Columns>
        <PropertyColumn Property="x=>x.Nome"/>
        <PropertyColumn Property="x=>x.Documento"/>
        <PropertyColumn Property="x=>x.Email"/>
        <PropertyColumn Property="x=>x.Celular"/>
        <PropertyColumn Property="x=>x.DataNascimento" Format="dd/MM/yyyy"/>
        <TemplateColumn>
            <CellTemplate>
                <MudStack Row>
                    <ButtonEditGeneric OnEditClick="@(()=>GoUpdate(context.Item.Id))" Hidden="@HideButtons" />
                    <ButtonDeleteGeneric ConfirmationMessage="Deseja Remover o Paciente?<br>Esta ação não tem volta!" Title="Remover Paciente" OnConfirmation="@(()=>Delete(context.Item))" Hidden="@HideButtons" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
@code {
    private List<Paciente> Pacientes { get; set; } = new List<Paciente>();
    public bool HideButtons { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthenticationState;

        HideButtons = !auth.User.IsInRole("Atendente");

        Pacientes = await repository.GetAllAsync();
    }

    public void GoUpdate(int id)
    {
        NavigationManager.NavigateTo($"/pacientes/editar/{id}");
    }

    public async void Delete(Paciente paciente)
    {
        try
        {
            await repository.DeleteByIdAsync(paciente.Id);
            Snackbar.Add($"Paciente {paciente.Nome} excluído com sucesso!", Severity.Success);
            await OnInitializedAsync();
        }catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
